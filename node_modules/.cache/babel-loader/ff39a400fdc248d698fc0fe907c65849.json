{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/lumicc/lumicc/src/components/includes/image.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function viewImage(props) {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [isInView, setIsInView] = useState(false);\n  const root = useRef(); // the container\n\n  useEffect(() => {\n    // sets `isInView` to true until root is visible on users browser\n    const observer = new IntersectionObserver(onIntersection, {\n      threshold: 0\n    });\n    observer.observe(root.current);\n\n    function onIntersection(entries) {\n      const {\n        isIntersecting\n      } = entries[0];\n\n      if (isIntersecting) {\n        // is in view\n        observer.disconnect();\n      }\n\n      setIsInView(isIntersecting);\n    }\n  }, []);\n\n  function onLoad() {\n    setIsLoading(prev => !prev);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: root,\n    className: `imgWrapper` + (isLoading ? \" imgWrapper--isLoading\" : \"\"),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"imgLoader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img\",\n      src: isInView ? props.src : null,\n      alt: \"\",\n      onLoad: onLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(viewImage, \"r6RJ7mjgq33b0SO17buSEnIgoFs=\");","map":{"version":3,"sources":["/Users/macbook/Desktop/lumicc/lumicc/src/components/includes/image.jsx"],"names":["React","viewImage","props","isLoading","setIsLoading","useState","isInView","setIsInView","root","useRef","useEffect","observer","IntersectionObserver","onIntersection","threshold","observe","current","entries","isIntersecting","disconnect","onLoad","prev","src"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACrC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BF,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMG,IAAI,GAAGC,MAAM,EAAnB,CAHqC,CAGd;;AAEvBC,EAAAA,SAAS,CAAC,MAAM;AACZ;AAEA,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBC,cAAzB,EAAyC;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAzC,CAAjB;AACAH,IAAAA,QAAQ,CAACI,OAAT,CAAiBP,IAAI,CAACQ,OAAtB;;AAEA,aAASH,cAAT,CAAwBI,OAAxB,EAAiC;AAC7B,YAAM;AAAEC,QAAAA;AAAF,UAAqBD,OAAO,CAAC,CAAD,CAAlC;;AAEA,UAAIC,cAAJ,EAAoB;AAAE;AAClBP,QAAAA,QAAQ,CAACQ,UAAT;AACH;;AAEDZ,MAAAA,WAAW,CAACW,cAAD,CAAX;AACH;AACJ,GAfQ,EAeN,EAfM,CAAT;;AAiBA,WAASE,MAAT,GAAkB;AACdhB,IAAAA,YAAY,CAAEiB,IAAD,IAAU,CAACA,IAAZ,CAAZ;AACH;;AACD,sBACI;AACI,IAAA,GAAG,EAAEb,IADT;AAEI,IAAA,SAAS,EAAG,YAAD,IAAgBL,SAAS,GAAG,wBAAH,GAA8B,EAAvD,CAFf;AAAA,4BAII;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,GAAG,EAAEG,QAAQ,GAAGJ,KAAK,CAACoB,GAAT,GAAe,IAAjD;AAAuD,MAAA,GAAG,EAAC,EAA3D;AAA8D,MAAA,MAAM,EAAEF;AAAtE;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GAlCuBnB,S","sourcesContent":["import React from 'react'\n\nexport default function viewImage(props) {\n    const [isLoading, setIsLoading] = useState(true);\n    const [isInView, setIsInView] = useState(false);\n    const root = useRef(); // the container\n\n    useEffect(() => {\n        // sets `isInView` to true until root is visible on users browser\n\n        const observer = new IntersectionObserver(onIntersection, { threshold: 0 });\n        observer.observe(root.current);\n\n        function onIntersection(entries) {\n            const { isIntersecting } = entries[0];\n\n            if (isIntersecting) { // is in view\n                observer.disconnect();\n            }\n\n            setIsInView(isIntersecting);\n        }\n    }, []);\n\n    function onLoad() {\n        setIsLoading((prev) => !prev);\n    }\n    return (\n        <div\n            ref={root}\n            className={`imgWrapper` + (isLoading ? \" imgWrapper--isLoading\" : \"\")}\n        >\n            <div className=\"imgLoader\" />\n            <img className=\"img\" src={isInView ? props.src : null} alt=\"\" onLoad={onLoad} />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}